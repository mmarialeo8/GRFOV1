@page "/login"
@layout LoginLayout
@inject WeatherForecastService ForecastService
@inject IRequest _iRequest
@inject IAPVDataData _iAPVDataData
@inject IMasterData _iMasterData
@inject Microsoft.JSInterop.IJSRuntime JSRuntime;

<PageTitle>Request</PageTitle>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">

                <form action="../../index3.html" method="post">
                    <div class="input-group mb-3">
                        <input type="email" class="form-control" placeholder="Email">
                        <div class="input-group-append">
                        <div class="input-group-text">
                            <span class="fas fa-envelope"></span>
                        </div>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <input type="password" class="form-control" placeholder="Password">
                        <div class="input-group-append">
                        <div class="input-group-text">
                            <span class="fas fa-lock"></span>
                        </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-8">
                        <div class="icheck-primary">
                            <input type="checkbox" id="remember">
                            <label for="remember">
                            Remember Me
                            </label>
                        </div>
                        </div>
                        <!-- /.col -->
                        <div class="col-4">
                        <button type="submit" class="btn btn-primary btn-block">Sign In</button>
                        </div>
                        <!-- /.col -->
                    </div>
                </form>
                
                <div class="modal-footer">
                    <a type="button" class="btn btn-secondary" href="/request">Cancel</a>
                    <button class="btn btn-primary" @onclick="()=>Save()">Save</button>                    
                </div>
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
</section>

@code {

    EditContext editContext;
    ValidationMessageStore validationMessages;    
    bool valid;
    private RequestPostModels? Model = new();
    private List<APVDataModels> multipleData = new();
    [Parameter]
    public bool Searchable { get; set; }

    MasterDataResult requestCategoryList = new();
    MasterDataResult businessTypeList = new();
    MasterDataResult requestSourceList = new();
    MasterDataResult repairLocationList = new();
    MasterDataResult customerLocationsList = new();
    MasterDataResult buNamesList = new();


    private bool showMultiplePlus = false;
    // public string SelectedValue { get; set; } = "Single";

    public string SelectedValue { get; set; } = "Single";
    public List<string> Items { get; set; } = new List<string> { "Single", "Multiple" };


    private bool divExectiveName = false;
    private bool divCCNumber = false;
    private bool divGRFOComment = false;


    private void OnRadiochange(object sender)
    {
        SelectedValue = (string)sender;
        showMultiplePlus = SelectedValue.Equals("Multiple");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Model);
        validationMessages = new(editContext);
        requestCategoryList = await _iMasterData.GetMasterDataList("RepairCategory", "RepairCategoryId", "RepairCategory");
        businessTypeList = await _iMasterData.GetMasterDataList("BusinessType", "BusinessTypeId", "BusinessType");
        requestSourceList = await _iMasterData.GetMasterDataList("RequestorSource", "RequestorSourceId", "RequestorSource");
        repairLocationList = await _iMasterData.GetMasterDataList("RepairLocation", "RepairLocationId", "RepairLocation");
        customerLocationsList = await _iMasterData.GetMasterDataList("CustomerLocations", "CustomerLocationId", "CustomerLocations");
        buNamesList = await _iMasterData.GetMasterDataList("BUNames", "BUNameId", "BUName");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("ConvertDatatable", new object[] { "#dtRequest", Searchable });
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task Save()
    {       
        List<APVDataModels> data = multipleData;
        if(multipleData.Count == 1)
        {
            Model.partDescription = multipleData[0].partDescription;
            Model.stdCostBasePart = multipleData[0].stdCostBasePart;
            Model.annualRepairForecast = multipleData[0].annualRepairForecast;
            Model.extendedSpendPotential = multipleData[0].extendedSpendPotential;
            Model.t1CustomerQty = multipleData[0].t1CustomerQty;
            Model.t2CustomerQty = multipleData[0].t2CustomerQty;
            Model.mg3 = multipleData[0].mg3;
            Model.pbg = multipleData[0].pbg;

            List<RequestPostModels> request = new List<RequestPostModels>();
            request.Add(Model);
            await _iRequest.SaveRequest(request);
        }
        else
        {
            List<RequestPostModels> request = new List<RequestPostModels>();

            for (int i = 0; i < multipleData.Count; i++)           
            {                
                request.Add(new RequestPostModels
                {             
                    requestId=Model.requestId,
                    annualRepairForecast1 = Model.annualRepairForecast1,
                    annualRepairForecast2 = Model.annualRepairForecast2,                    
                    buNameId = Model.buNameId,
                    businessCaseStatus = Model.businessCaseStatus,
                    businessTypeId = Model.businessTypeId,
                    ccNumber = Model.ccNumber,
                    comments = Model.comments,
                    customerLocationId = Model.customerLocationId,
                    exectiveName = Model.exectiveName,                    
                    grfoComment = Model.grfoComment,
                    hdfbuNameId = Model.hdfbuNameId,
                    needByDate=Model.needByDate,
                    partRequestId=Model.partRequestId,
                    pilotReviewStatus=Model.pilotReviewStatus,
                    prdDate=Model.prdDate,
                    prdImplementation=Model.prdImplementation,
                    repairLocationId=Model.repairLocationId,
                    requestCategoryId=Model.requestCategoryId,                    
                    requestor=Model.requestor,
                    requestorProjectGroup=Model.requestorProjectGroup,
                    requestSourceId=Model.requestSourceId,
                    requestType=Model.requestType,
                    screeningStatus=Model.screeningStatus,
                    solutionPartNumber=Model.solutionPartNumber,
                    targetCustomer=Model.targetCustomer,
                    

                    basePartNumber = multipleData[i].basePartNumber,
                    partDescription = multipleData[i].partDescription,
                    stdCostBasePart = multipleData[i].stdCostBasePart,
                    annualRepairForecast = multipleData[i].annualRepairForecast,
                    extendedSpendPotential = multipleData[i].extendedSpendPotential,
                    t1CustomerQty = multipleData[i].t1CustomerQty,
                    t2CustomerQty = multipleData[i].t2CustomerQty,
                    mg3 = multipleData[i].mg3,
                    pbg = multipleData[i].pbg,                });                      
            }
            await _iRequest.SaveRequest(request);
        }
    }

    protected async Task AddBasepart(string basePartNumber)
    {
        if(showMultiplePlus || multipleData.Count==0)
        {
            APVDataResponse objData = await _iAPVDataData.GetApvDatList(basePartNumber);
            if (objData.isTransactionDone)
            {
                if (objData.locationPart != null)
                {
                    string customerIds = string.Join(",", objData.locationPart.Distinct().Select(x => x.shiptocust.ToString()).ToArray());
                    if (!string.IsNullOrEmpty(customerIds))
                    {
                        customerResult objCustomerList = await _iRequest.GetCustomerList(customerIds);

                        if (objCustomerList.isTransactionDone)
                        {
                            if (objCustomerList.customers != null)
                            {
                                foreach (var item in objCustomerList.customers)
                                {
                                    (from k in objData.locationPart
                                     where k.shiptocust == item.customerName
                                     select k).ToList().ForEach(k => k.T1T2Category = item.customerType);
                                }
                                objData.APVData.t1CustomerQty = objData.locationPart.Where(x => x.T1T2Category == "T1" || x.T1T2Category == "t1").Sum(m => m.dh_qty);
                                objData.APVData.t2CustomerQty = objData.locationPart.Where(x => x.T1T2Category == "T2" || x.T1T2Category == "t2").Sum(m => m.dh_qty);
                            }
                        }
                    }
                }
            }
            multipleData.Add(objData.APVData);
        }
    }

    private Task OnRequestSourceChanged(int value)
    {
        divExectiveName = divCCNumber = divGRFOComment = false;

        // Assign the selected value to the Model 
        Model.requestSourceId = value;

        if (Model.requestSourceId == 2) {
            divExectiveName = true;
        }
        if (Model.requestSourceId == 3) {
            divCCNumber = true;
        }
        if (Model.requestSourceId == 4) {
            divGRFOComment = true;
        }

        return Task.CompletedTask;
    }   

}


