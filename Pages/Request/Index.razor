@page "/"
@inject WeatherForecastService ForecastService
@inject IRequest _iRequest
@inject IAPVDataData _iapvData
@inject Microsoft.JSInterop.IJSRuntime JSRuntime;
@using ClosedXML.Excel
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.Data
@using SoloX.BlazorJsBlob
@inject IBlobService BlobService

<PageTitle>Request</PageTitle>


<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        @* <h3 class="card-title">Request Details</h3> *@
                        <a class="btn btn-primary" href="/request/add">
                            <i class="fa fa-plus"></i>
                            Add Request
                        </a>
                        <a class="btn btn-warning">
                            <i class="fa fa-download"></i>
                            Update Request
                        </a>
                        <a class="btn btn-info" @onclick="DownloadExcel">
                            <i class="fa fa-download"></i>
                            Download Excel
                        </a>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body">

                        @if (_Result == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else if (!_Result.isTransactionDone)
                        {
                            <p><em>@_Result.transactionMessage</em></p>
                        }
                        else
                        {

                            <table id="dtRequest" class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Source</th>
                                        <th>Category</th>
                                        <th>BU</th>
                                        <th>Base P/N</th>
                                        <th>Part Desc</th>
                                        <th>Screening</th>
                                        <th>BC</th>
                                        <th>Pilot</th>
                                        <th>Production</th>
                                        <th>AF Qty</th>
                                        <th>Need By</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _Result.request)
                                    {
                                        <tr>
                                            <td>@item.requestId</td>
                                            <td>@item.requestorSource</td>
                                            <td>@item.repairCategory</td>
                                            <td>@item.businessType</td>
                                            <td>@item.basePartNumber</td>
                                            <td>@item.partDescription</td>
                                            <td>@item.screeningStatus</td>
                                            <td>@item.businessCaseStatus</td>
                                            <td>@item.pilotReviewStatus</td>
                                            <td>@item.prdImplementation</td>
                                            <td>@item.t1CustomerQty</td>
                                            <td>@item.needByDate</td>
                                            <td>
                                                <a href='/request/edit/@item.groupRequestId' class='text-warning' title='Click here to edit record'><i class='fa fa-pen'></i></a>
                                                <a href='javascript:void(0);' class='text-secondary' onclick='request_events.viewRequest(" + JsonResultRow.requestId + ")' title='Click here to update status'><i class='fa fa-info-circle'></i></a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        }

                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
</section>







@code {
    private RequestResult? _Result;

    [Parameter]
    public bool Searchable { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string id { get; set; } = "DataTable-" + Guid.NewGuid().ToString();

    protected override void OnParametersSet()
    {
        StateHasChanged();
        base.OnParametersSet();
    }


    protected override async Task OnInitializedAsync()
    {
        _Result = await _iRequest.GetRequestList();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<string>("ConvertDatatable", new object[] { "#dtRequest", Searchable });
        await base.OnAfterRenderAsync(firstRender);
    }


    private async void DownloadExcel()
    {

        APVDataDownloadResponse _Data = await _iapvData.GetDownloadData("0360-4597");

        string[] basepartNumbers = ("0360-4597").Split(',');

        DataTable dtExcelSource = GetExcelTemplate();

        string Files = "wwwroot/UploadExcel/Request_Master.xlsx";

        string sWebRootFolder = @"wwwroot/UploadExcel/";
        string sFileName = @"Request_Master.xlsx";           
        FileInfo file = new FileInfo(Path.Combine(sWebRootFolder, sFileName));
        var memory = new MemoryStream();
        using (var fs = new FileStream(Path.Combine(sWebRootFolder, sFileName), FileMode.Create, FileAccess.Write))
        {

            IWorkbook workbook;
            workbook = new XSSFWorkbook();

            ISheet excelSheet = workbook.CreateSheet("Sheet1");
            IRow row = excelSheet.CreateRow(0);

            #region Sheet 2

            ISheet sheet2 = workbook.CreateSheet("Sheet2");
            IRow row2 = sheet2.CreateRow(0);
            row2.CreateCell(0).SetCellValue("S.No");
            row2.CreateCell(1).SetCellValue("Data");

            IRow row21 = sheet2.CreateRow(1);
            row21.CreateCell(0).SetCellFormula("Sheet1!E2*Sheet1!F2");
            row21.CreateCell(1).SetCellFormula("Sheet1!E2+Sheet1!F2");

            #endregion Sheet 2

            #region Sheet 3

            // ISheet sheet3 = workbook.CreateSheet("Sheet3");
            // IRow row3 = sheet3.CreateRow(0);
            // row3.CreateCell(0).SetCellValue("S.No");
            // row3.CreateCell(1).SetCellValue("Data");

            #endregion Sheet 3

            #region Creating Top Rows

            for (int i = 0; i < dtExcelSource.Columns.Count; i++)
            {
                row.CreateCell(i).SetCellValue(dtExcelSource.Columns[i].ColumnName);
            }

            #endregion

            for (int i = 0; i < 1; i++)
            {
                row = excelSheet.CreateRow(i + 1);

                row.CreateCell(0).SetCellValue(_Data.apvData.material);
                row.CreateCell(1).SetCellValue(_Data.apvData.material_desc);
                row.CreateCell(2).SetCellValue(_Data.apvData.mg3);
                row.CreateCell(3).SetCellValue(_Data.apvData.pbg);
                row.CreateCell(4).SetCellValue(_Data.apvData.cost);
                row.CreateCell(5).SetCellValue(_Data.apvData.gfcst);

            }

            workbook.Write(fs);

        }
        using (var stream = new FileStream(Path.Combine(sWebRootFolder, sFileName), FileMode.Open))
        {
            await stream.CopyToAsync(memory);
        }
        memory.Position = 0;
            
        var b64 = Convert.ToBase64String(memory.ToArray());
        // Finally call the SaveAsFileAsync with the data URL.
        var dataUrl = $"data:image/jpeg;base64," + b64;
        await BlobService.SaveAsFileAsync(dataUrl, "Request_Master.xlsx");


    }

    public class ExcelData
    {
        public int studentId { get; set; }
        public string firstName { get; set; }
        public string secondName { get; set; }
        public string className { get; set; }
        public double Mark1 { get; set; }
        public double Mark2 { get; set; }
    }

    public List<ExcelData> populateData()
    {
        List<ExcelData> data = new List<ExcelData>();

        for (int i = 0; i < 5; i++)
        {
            data.Add(
            new ExcelData
                {
                    studentId = i + 1,
                    firstName = "First Name " + (1 + i),
                    secondName = "Second Name " + (1 + i),
                    className = "VI A",
                    Mark1 = 12 + i,
                    Mark2=25 + i
                });
        }
        return data;
    }

    public DataTable GetExcelTemplate()
        {
            DataTable dt = new DataTable();
            dt.TableName = "";
           
            dt.Columns.Add("Base Part Number", typeof(string));
            dt.Columns.Add("Description", typeof(string));
            dt.Columns.Add("MG3", typeof(int));
            dt.Columns.Add("PBG", typeof(string));
            dt.Columns.Add("Cost", typeof(int));
            dt.Columns.Add("GFCST", typeof(int));
            return dt;
        }

}


